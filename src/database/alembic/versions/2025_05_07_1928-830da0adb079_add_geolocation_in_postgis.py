"""Add Geolocation in Postgis

Revision ID: 830da0adb079
Revises: 2074c1438361
Create Date: 2025-05-07 19:28:57.244164

"""
from typing import Sequence, Union

from geoalchemy2 import Geometry
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '830da0adb079'
down_revision: Union[str, None] = '2074c1438361'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("CREATE EXTENSION IF NOT EXISTS postgis")
    op.create_table('geolocations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('filter_type', sa.Enum('REGION', 'RADIUS', 'POLYGON', name='geofiltertype'), nullable=False),
    sa.Column('region', sa.String(), nullable=True),
    sa.Column('home_location', Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('radius', sa.Integer(), nullable=True),
    sa.Column('polygon', Geometry(geometry_type='POLYGON', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('use_current_location', sa.Boolean(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace
                WHERE c.relname = 'idx_geolocations_home_location'
            ) THEN
                CREATE INDEX idx_geolocations_home_location ON geolocations USING gist (home_location);
            END IF;
        END
        $$;
    """)

    op.execute("""
        DO $$
        BEGIN
            IF NOT EXISTS (
                SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace
                WHERE c.relname = 'idx_geolocations_polygon'
            ) THEN
                CREATE INDEX idx_geolocations_polygon ON geolocations USING gist (polygon);
            END IF;
        END
        $$;
    """)
    op.create_index(op.f('ix_geolocations_region'), 'geolocations', ['region'], unique=False)
    op.create_index(op.f('ix_geolocations_user_id'), 'geolocations', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_geolocations_user_id'), table_name='geolocations')
    op.drop_index(op.f('ix_geolocations_region'), table_name='geolocations')
    op.execute("""
            DO $$
            BEGIN
                IF EXISTS (
                    SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace
                    WHERE c.relname = 'idx_geolocations_polygon'
                ) THEN
                    DROP INDEX idx_geolocations_polygon;
                END IF;
            END
            $$;
        """)

    op.execute("""
            DO $$
            BEGIN
                IF EXISTS (
                    SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace
                    WHERE c.relname = 'idx_geolocations_home_location'
                ) THEN
                    DROP INDEX idx_geolocations_home_location;
                END IF;
            END
            $$;
        """)
    op.drop_table('geolocations')
    sa.Enum(name="geofiltertype").drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###
