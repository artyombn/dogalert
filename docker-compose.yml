services:
  web:
    container_name: fastapi_app
    build:
      context: .
      dockerfile: Dockerfile
    expose:
      - "8001"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
    env_file:
      - .env
    restart: unless-stopped
    networks:
      app_network:

  postgres:
    image: postgis/postgis:latest # postgres + postgis
    container_name: dogalert_postgres
    platform: linux/amd64
    env_file:
      - .env
    expose:
      - "5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
    environment:
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=peer
    command: >
      postgres -c max_connections=200
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
               -c log_connections=on
               -c log_disconnections=on
               -c log_statement=ddl
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d dbname" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      app_network:

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    depends_on:
      - postgres
    expose:
      - "80"
    env_file:
      - .env
    volumes:
      - pgadmin:/var/lib/pgadmin
    networks:
      app_network:

  rabbitmq:
    image: rabbitmq:4-management-alpine
    hostname: rabbitmq
    container_name: rabbitmq
    expose:
      - "5672"
      - "15672"
    env_file:
      - .env
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.2"
          memory: 256M
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      app_network:

  rmq_consumer:
    build: .
    command: ["python3", "-m", "src.broker.consumer"]
    volumes:
      - .:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      app_network:

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./src/web/static:/app/src/web/static
      - /var/www/certbot:/var/www/certbot:ro
    depends_on:
      - web
    networks:
      app_network:

  celery_worker:
    build: .
    command: ["celery", "--app", "src.celery_app.config", "worker", "--loglevel", "INFO"]
    volumes:
      - .:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      app_network:

  flower:
    build: .
    command: ["celery", "--app", "src.celery_app", "flower"]
    volumes:
      - .:/app
    expose:
      - "5555"
    depends_on:
      - celery_worker
    networks:
      app_network:

  celery_beat:
    build: .
    command: ["celery", "--app", "src.celery_app", "beat", "--loglevel", "INFO"]
    volumes:
      - .:/app
    depends_on:
      - celery_worker
    networks:
      app_network:

volumes:
  pgdata:
  pgadmin:
  rabbitmq-data:

networks:
  app_network:
    driver: bridge
    internal: false